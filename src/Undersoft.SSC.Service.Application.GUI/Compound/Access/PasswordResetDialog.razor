@using System.ComponentModel.DataAnnotations
@using Undersoft.SDK.Instant.Proxies
@using Undersoft.SDK.Instant.Rubrics
@using Undersoft.SDK

@typeparam TModel where TModel : class, IOrigin, IInnerProxy

@implements IDialogContentComponent<IGenericData<TModel>>

<!-- Header -->
<FluentDialogHeader>
    <FluentStack Orientation="Orientation.Vertical">
        <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
            <a><img src=@Content.Logo /></a>
            <FluentSpacer />
            <FluentIcon Value="@Content.Icon" />
            <FluentLabel Typo="Typography.PaneHeader">
                @Dialog.Instance.Parameters.Title
            </FluentLabel>
        </FluentStack>
        <FluentLabel Typo="Typography.Body">
            @Content.Description
        </FluentLabel>
        <FluentLabel Typo="Typography.Body" Color="Color.Error">
            @Content.Status
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

@if (Content != null)
{
    <!-- Body -->
    <FluentDialogBody>

        <!-- Auto Form -->
        <GenericForm TModel="@TModel" Model="@Content" Context="@FormContext" />

    </FluentDialogBody>
}
<!-- Footer -->
<FluentDialogFooter>      
    <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
        <a>Some problems with verification e-mail?</a>
        <FluentButton OnClick="@OnSendAgain" Appearance="Appearance.Lightweight">
            Send again
        </FluentButton>
    </FluentStack>
    <FluentSpacer />
    <FluentButton Appearance="Appearance.Accent"
                  Disabled="@(!FormContext.Validate())"
                  OnClick="@SaveAsync">
        Confirm
    </FluentButton>
</FluentDialogFooter>

@code
 {    
    public EditContext FormContext { get; set; } = default!;

    [Parameter]
    public IGenericData<TModel> Content { get; set; } = default!;

    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    protected override void OnInitialized()
    {
        FormContext = new EditContext(Content);
    }

    private async Task SaveAsync()
    {
        if (FormContext.Validate())
        {
            await Dialog.CloseAsync(Content);
        }
    }

    private async Task OnSendAgain(MouseEventArgs e)
    {
        await Dialog.CancelAsync();
       
    }
}
